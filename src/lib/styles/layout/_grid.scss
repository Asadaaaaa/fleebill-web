/**
 * Grid System
 */

.container {
  @extend %container;
}

.container-fluid {
  width: 100%;
  padding-right: $space-4;
  padding-left: $space-4;
  margin-right: auto;
  margin-left: auto;
}

// Row
.row {
  display: flex;
  flex-wrap: wrap;
  margin-right: ($grid-gutter-width / -2);
  margin-left: ($grid-gutter-width / -2);
}

// No gutters
.row-no-gutters {
  margin-right: 0;
  margin-left: 0;
  
  > .col,
  > [class*="col-"] {
    padding-right: 0;
    padding-left: 0;
  }
}

// Columns
.col {
  flex-basis: 0;
  flex-grow: 1;
  max-width: 100%;
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
}

// Auto sizing column
.col-auto {
  flex: 0 0 auto;
  width: auto;
  max-width: 100%;
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
}

// Column sizing
@for $i from 1 through $grid-columns {
  .col-#{$i} {
    flex: 0 0 percentage($i / $grid-columns);
    max-width: percentage($i / $grid-columns);
    padding-right: ($grid-gutter-width / 2);
    padding-left: ($grid-gutter-width / 2);
  }
}

// Responsive columns
@each $breakpoint in (sm, md, lg, xl, 2xl) {
  @include respond-to($breakpoint) {
    .col-#{$breakpoint} {
      flex-basis: 0;
      flex-grow: 1;
      max-width: 100%;
    }
    
    .col-#{$breakpoint}-auto {
      flex: 0 0 auto;
      width: auto;
      max-width: 100%;
    }
    
    @for $i from 1 through $grid-columns {
      .col-#{$breakpoint}-#{$i} {
        flex: 0 0 percentage($i / $grid-columns);
        max-width: percentage($i / $grid-columns);
      }
    }
  }
}

// Column order
.order-first { order: -1; }
.order-last { order: $grid-columns + 1; }

@for $i from 0 through $grid-columns {
  .order-#{$i} { order: $i; }
}

// Responsive order
@each $breakpoint in (sm, md, lg, xl, 2xl) {
  @include respond-to($breakpoint) {
    .order-#{$breakpoint}-first { order: -1; }
    .order-#{$breakpoint}-last { order: $grid-columns + 1; }
    
    @for $i from 0 through $grid-columns {
      .order-#{$breakpoint}-#{$i} { order: $i; }
    }
  }
}

// Offset columns
@for $i from 0 through ($grid-columns - 1) {
  .offset-#{$i} {
    margin-left: percentage($i / $grid-columns);
  }
}

// Responsive offset
@each $breakpoint in (sm, md, lg, xl, 2xl) {
  @include respond-to($breakpoint) {
    @for $i from 0 through ($grid-columns - 1) {
      .offset-#{$breakpoint}-#{$i} {
        margin-left: percentage($i / $grid-columns);
      }
    }
  }
}

// CSS Grid utilities
.grid {
  display: grid;
  gap: $grid-gutter-width;
}

// Grid template columns
.grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
.grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
.grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
.grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
.grid-cols-5 { grid-template-columns: repeat(5, minmax(0, 1fr)); }
.grid-cols-6 { grid-template-columns: repeat(6, minmax(0, 1fr)); }
.grid-cols-12 { grid-template-columns: repeat(12, minmax(0, 1fr)); }
.grid-cols-none { grid-template-columns: none; }

// Responsive grid template columns
@each $breakpoint in (sm, md, lg, xl, 2xl) {
  @include respond-to($breakpoint) {
    .grid-cols-#{$breakpoint}-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    .grid-cols-#{$breakpoint}-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
    .grid-cols-#{$breakpoint}-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
    .grid-cols-#{$breakpoint}-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
    .grid-cols-#{$breakpoint}-5 { grid-template-columns: repeat(5, minmax(0, 1fr)); }
    .grid-cols-#{$breakpoint}-6 { grid-template-columns: repeat(6, minmax(0, 1fr)); }
    .grid-cols-#{$breakpoint}-12 { grid-template-columns: repeat(12, minmax(0, 1fr)); }
    .grid-cols-#{$breakpoint}-none { grid-template-columns: none; }
  }
}

// Gap
.gap-0 { gap: 0; }
.gap-1 { gap: $space-1; }
.gap-2 { gap: $space-2; }
.gap-3 { gap: $space-3; }
.gap-4 { gap: $space-4; }
.gap-5 { gap: $space-5; }
.gap-6 { gap: $space-6; }
.gap-8 { gap: $space-8; }
.gap-10 { gap: $space-10; }

// Column span
.col-span-1 { grid-column: span 1 / span 1; }
.col-span-2 { grid-column: span 2 / span 2; }
.col-span-3 { grid-column: span 3 / span 3; }
.col-span-4 { grid-column: span 4 / span 4; }
.col-span-5 { grid-column: span 5 / span 5; }
.col-span-6 { grid-column: span 6 / span 6; }
.col-span-7 { grid-column: span 7 / span 7; }
.col-span-8 { grid-column: span 8 / span 8; }
.col-span-9 { grid-column: span 9 / span 9; }
.col-span-10 { grid-column: span 10 / span 10; }
.col-span-11 { grid-column: span 11 / span 11; }
.col-span-12 { grid-column: span 12 / span 12; }
.col-span-full { grid-column: 1 / -1; }

// Responsive column span
@each $breakpoint in (sm, md, lg, xl, 2xl) {
  @include respond-to($breakpoint) {
    .col-span-#{$breakpoint}-1 { grid-column: span 1 / span 1; }
    .col-span-#{$breakpoint}-2 { grid-column: span 2 / span 2; }
    .col-span-#{$breakpoint}-3 { grid-column: span 3 / span 3; }
    .col-span-#{$breakpoint}-4 { grid-column: span 4 / span 4; }
    .col-span-#{$breakpoint}-5 { grid-column: span 5 / span 5; }
    .col-span-#{$breakpoint}-6 { grid-column: span 6 / span 6; }
    .col-span-#{$breakpoint}-7 { grid-column: span 7 / span 7; }
    .col-span-#{$breakpoint}-8 { grid-column: span 8 / span 8; }
    .col-span-#{$breakpoint}-9 { grid-column: span 9 / span 9; }
    .col-span-#{$breakpoint}-10 { grid-column: span 10 / span 10; }
    .col-span-#{$breakpoint}-11 { grid-column: span 11 / span 11; }
    .col-span-#{$breakpoint}-12 { grid-column: span 12 / span 12; }
    .col-span-#{$breakpoint}-full { grid-column: 1 / -1; }
  }
} 